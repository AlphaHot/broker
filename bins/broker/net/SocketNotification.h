/*
 * Copyright 2014-present IVK JSC. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef Net_SocketNotification_INCLUDED
#define Net_SocketNotification_INCLUDED

#include "Poco/Net/Net.h"
#include "Poco/Net/Socket.h"
#include "Poco/Notification.h"

namespace upmq {
namespace Net {

class SocketReactor;

class SocketNotification : public Poco::Notification
/// The base class for all notifications generated by
/// the SocketReactor.
{
 public:
  explicit SocketNotification(SocketReactor* pReactor);
  /// Creates the SocketNotification for the given SocketReactor.

  ~SocketNotification() override;
  /// Destroys the SocketNotification.

  SocketReactor& source() const;
  /// Returns the SocketReactor that generated the notification.

  Poco::Net::Socket socket() const;
  /// Returns the socket that caused the notification.

 private:
  void setSocket(const Poco::Net::Socket& socket);

  SocketReactor* _pReactor;
  Poco::Net::Socket _socket;

  friend class SocketNotifier;
};

class ReadableNotification : public SocketNotification
/// This notification is sent if a socket has become readable.
{
 public:
  ReadableNotification(SocketReactor* pReactor);
  /// Creates the ReadableNotification for the given SocketReactor.

  ~ReadableNotification();
  /// Destroys the ReadableNotification.
};

class WritableNotification : public SocketNotification
/// This notification is sent if a socket has become writable.
{
 public:
  WritableNotification(SocketReactor* pReactor);
  /// Creates the WritableNotification for the given SocketReactor.

  ~WritableNotification();
  /// Destroys the WritableNotification.
};

class ErrorNotification : public SocketNotification
/// This notification is sent if a socket has signalled an error.
{
 public:
  ErrorNotification(SocketReactor* pReactor);
  /// Creates the ErrorNotification for the given SocketReactor.

  ~ErrorNotification();
  /// Destroys the ErrorNotification.
};

class TimeoutNotification : public SocketNotification
/// This notification is sent if no other event has occurred
/// for a specified time.
{
 public:
  TimeoutNotification(SocketReactor* pReactor);
  /// Creates the TimeoutNotification for the given SocketReactor.

  ~TimeoutNotification();
  /// Destroys the TimeoutNotification.
};

class IdleNotification : public SocketNotification
/// This notification is sent when the SocketReactor does
/// not have any sockets to react to.
{
 public:
  IdleNotification(SocketReactor* pReactor);
  /// Creates the IdleNotification for the given SocketReactor.

  ~IdleNotification();
  /// Destroys the IdleNotification.
};

class ShutdownNotification : public SocketNotification
/// This notification is sent when the SocketReactor is
/// about to shut down.
{
 public:
  ShutdownNotification(SocketReactor* pReactor);
  /// Creates the ShutdownNotification for the given SocketReactor.

  ~ShutdownNotification();
  /// Destroys the ShutdownNotification.
};

//
// inlines
//
inline SocketReactor& SocketNotification::source() const { return *_pReactor; }

inline Poco::Net::Socket SocketNotification::socket() const { return _socket; }

}  // namespace Net
}  // namespace upmq

#endif  // Net_SocketNotification_INCLUDED
